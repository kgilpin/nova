'''
GenGlobalLock.py
Tue Mar 29 11:44:59 2005
Generated by MiddleKit.
'''

# MK attribute caches for setFoo() methods
_dummyAttrAttr = None

import types
from mx import DateTime


from MiddleKit.Run.MiddleObject import MiddleObject
from types import InstanceType, LongType
from MiddleKit.Run.SQLObjectStore import ObjRefError



class GenGlobalLock(MiddleObject):

	def __init__(self):
		MiddleObject.__init__(self)
		self._dummyAttr = None

	def construct(self):
		# Construct the GlobalLock with all the required attributes that do not have default values
		pass
	def dummyAttr(self):
		return self._dummyAttr

	def setDummyAttr(self, value):
		if value is not None:
			if type(value) is types.LongType:
				value = int(value)
			elif type(value) is not types.IntType:
				raise TypeError, 'expecting int type, but got value %r of type %r instead' % (value, type(value))

		# set the attribute
		origValue = self._dummyAttr
		self._dummyAttr = value

		# MiddleKit machinery
		self._mk_changed = 1  # @@ original semantics, but I think this should be under "if not self._mk_initing..."
		if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
			global _dummyAttrAttr
			if _dummyAttrAttr is None:
				_dummyAttrAttr = self.klass().lookupAttr('dummyAttr')
				if not _dummyAttrAttr.shouldRegisterChanges():
					_dummyAttrAttr = 0
			if _dummyAttrAttr:
				# Record that it has been changed
				if self._mk_changedAttrs is None:
					self._mk_changedAttrs = {} # maps name to attribute
				self._mk_changedAttrs['dummyAttr'] = _dummyAttrAttr  # changedAttrs is a set
				# Tell ObjectStore it happened
				self._mk_store.objectChanged(self)

