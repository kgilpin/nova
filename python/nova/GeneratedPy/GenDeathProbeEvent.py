'''
GenDeathProbeEvent.py
Tue Mar 29 11:44:59 2005
Generated by MiddleKit.
'''

# MK attribute caches for setFoo() methods
_gameAttr = None
_executionTimeAttr = None
_eventCounterAttr = None
_playerAttr = None
_statusAttr = None
_starAttr = None
_hasDeathShieldAttr = None

import types
from mx import DateTime
import sys
from os.path import dirname
sys.path.insert(0, dirname(dirname(dirname(__file__))))
from nova.Event import Event
del sys.path[0]

from types import InstanceType, LongType
from MiddleKit.Run.SQLObjectStore import ObjRefError



class GenDeathProbeEvent(Event):

	def __init__(self):
		Event.__init__(self)
		self._star           = None
		self._hasDeathShield = None

	def construct(self, game, executionTime, player, star):
		# Construct the DeathProbeEvent with all the required attributes that do not have default values
		self.setGame( game )
		self.setExecutionTime( executionTime )
		self.setPlayer( player )
		self.setStar( star )

	def star(self):
		if self._star is not None and type(self._star) is not InstanceType:
			try:
				self.__dict__['_star'] = self._mk_store.fetchObjRef(self._star)
			except ObjRefError, e:
				self.__dict__['_star'] = self.objRefErrorWasRaised(e, 'DeathProbeEvent', 'star')
		return self._star

	def setStar(self, value):
		assert value is not None
		if value is not None and type(value) is not LongType:
			if not type(value) is InstanceType:
				raise TypeError, 'expecting InstanceType, but got value %r of type %r instead' % (value, type(value))
			from nova.Star import Star
			if not isinstance(value, Star):
				raise TypeError, 'expecting Star, but got value %r of type %r instead' % (value, type(value))

		# set the attribute
		origValue = self._star
		self._star = value

		# MiddleKit machinery
		self._mk_changed = 1  # @@ original semantics, but I think this should be under "if not self._mk_initing..."
		if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
			global _starAttr
			if _starAttr is None:
				_starAttr = self.klass().lookupAttr('star')
				if not _starAttr.shouldRegisterChanges():
					_starAttr = 0
			if _starAttr:
				# Record that it has been changed
				if self._mk_changedAttrs is None:
					self._mk_changedAttrs = {} # maps name to attribute
				self._mk_changedAttrs['star'] = _starAttr  # changedAttrs is a set
				# Tell ObjectStore it happened
				self._mk_store.objectChanged(self)

	def hasDeathShield(self):
		return self._hasDeathShield

	def setHasDeathShield(self, value):
		if value is not None:
			if type(value) is not types.IntType:
				raise TypeError, 'expecting int for bool, but got value %r of type %r instead' % (value, type(value))
			if value not in (0, 1):
				raise ValueError, 'expecting 0 or 1 for bool, but got %s instead' % value

		# set the attribute
		origValue = self._hasDeathShield
		self._hasDeathShield = value

		# MiddleKit machinery
		self._mk_changed = 1  # @@ original semantics, but I think this should be under "if not self._mk_initing..."
		if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
			global _hasDeathShieldAttr
			if _hasDeathShieldAttr is None:
				_hasDeathShieldAttr = self.klass().lookupAttr('hasDeathShield')
				if not _hasDeathShieldAttr.shouldRegisterChanges():
					_hasDeathShieldAttr = 0
			if _hasDeathShieldAttr:
				# Record that it has been changed
				if self._mk_changedAttrs is None:
					self._mk_changedAttrs = {} # maps name to attribute
				self._mk_changedAttrs['hasDeathShield'] = _hasDeathShieldAttr  # changedAttrs is a set
				# Tell ObjectStore it happened
				self._mk_store.objectChanged(self)

