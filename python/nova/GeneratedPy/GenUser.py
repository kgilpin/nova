'''
GenUser.py
Tue Mar 29 11:44:59 2005
Generated by MiddleKit.
'''

# MK attribute caches for setFoo() methods
_nameAttr = None
_passwordAttr = None
_emailAttr = None

import types
from mx import DateTime


from MiddleKit.Run.MiddleObject import MiddleObject
from types import InstanceType, LongType
from MiddleKit.Run.SQLObjectStore import ObjRefError



class GenUser(MiddleObject):

	def __init__(self):
		MiddleObject.__init__(self)
		self._name     = None
		self._password = None
		self._email    = None

	def construct(self, name, password, email):
		# Construct the User with all the required attributes that do not have default values
		self.setName( name )
		self.setPassword( password )
		self.setEmail( email )

	def name(self):
		return self._name

	def setName(self, value):
		assert value is not None
		if value is not None:
			if type(value) is not types.StringType:
				raise TypeError, 'expecting string type, but got value %r of type %r instead' % (value, type(value))

		# set the attribute
		origValue = self._name
		self._name = value

		# MiddleKit machinery
		self._mk_changed = 1  # @@ original semantics, but I think this should be under "if not self._mk_initing..."
		if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
			global _nameAttr
			if _nameAttr is None:
				_nameAttr = self.klass().lookupAttr('name')
				if not _nameAttr.shouldRegisterChanges():
					_nameAttr = 0
			if _nameAttr:
				# Record that it has been changed
				if self._mk_changedAttrs is None:
					self._mk_changedAttrs = {} # maps name to attribute
				self._mk_changedAttrs['name'] = _nameAttr  # changedAttrs is a set
				# Tell ObjectStore it happened
				self._mk_store.objectChanged(self)

	def password(self):
		return self._password

	def setPassword(self, value):
		assert value is not None
		if value is not None:
			if type(value) is not types.StringType:
				raise TypeError, 'expecting string type, but got value %r of type %r instead' % (value, type(value))

		# set the attribute
		origValue = self._password
		self._password = value

		# MiddleKit machinery
		self._mk_changed = 1  # @@ original semantics, but I think this should be under "if not self._mk_initing..."
		if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
			global _passwordAttr
			if _passwordAttr is None:
				_passwordAttr = self.klass().lookupAttr('password')
				if not _passwordAttr.shouldRegisterChanges():
					_passwordAttr = 0
			if _passwordAttr:
				# Record that it has been changed
				if self._mk_changedAttrs is None:
					self._mk_changedAttrs = {} # maps name to attribute
				self._mk_changedAttrs['password'] = _passwordAttr  # changedAttrs is a set
				# Tell ObjectStore it happened
				self._mk_store.objectChanged(self)

	def email(self):
		return self._email

	def setEmail(self, value):
		assert value is not None
		if value is not None:
			if type(value) is not types.StringType:
				raise TypeError, 'expecting string type, but got value %r of type %r instead' % (value, type(value))

		# set the attribute
		origValue = self._email
		self._email = value

		# MiddleKit machinery
		self._mk_changed = 1  # @@ original semantics, but I think this should be under "if not self._mk_initing..."
		if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
			global _emailAttr
			if _emailAttr is None:
				_emailAttr = self.klass().lookupAttr('email')
				if not _emailAttr.shouldRegisterChanges():
					_emailAttr = 0
			if _emailAttr:
				# Record that it has been changed
				if self._mk_changedAttrs is None:
					self._mk_changedAttrs = {} # maps name to attribute
				self._mk_changedAttrs['email'] = _emailAttr  # changedAttrs is a set
				# Tell ObjectStore it happened
				self._mk_store.objectChanged(self)

