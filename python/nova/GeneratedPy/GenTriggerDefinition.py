'''
GenTriggerDefinition.py
Tue Mar 29 11:44:59 2005
Generated by MiddleKit.
'''

# MK attribute caches for setFoo() methods
_classNameAttr = None

import types
from mx import DateTime


from MiddleKit.Run.MiddleObject import MiddleObject
from types import InstanceType, LongType
from MiddleKit.Run.SQLObjectStore import ObjRefError



class GenTriggerDefinition(MiddleObject):

	def __init__(self):
		MiddleObject.__init__(self)
		self._className = None

	def construct(self, className):
		# Construct the TriggerDefinition with all the required attributes that do not have default values
		self.setClassName( className )

	def className(self):
		return self._className

	def setClassName(self, value):
		assert value is not None
		if value is not None:
			if type(value) is not types.StringType:
				raise TypeError, 'expecting string type, but got value %r of type %r instead' % (value, type(value))

		# set the attribute
		origValue = self._className
		self._className = value

		# MiddleKit machinery
		self._mk_changed = 1  # @@ original semantics, but I think this should be under "if not self._mk_initing..."
		if not self._mk_initing and self._mk_serialNum>0 and value is not origValue:
			global _classNameAttr
			if _classNameAttr is None:
				_classNameAttr = self.klass().lookupAttr('className')
				if not _classNameAttr.shouldRegisterChanges():
					_classNameAttr = 0
			if _classNameAttr:
				# Record that it has been changed
				if self._mk_changedAttrs is None:
					self._mk_changedAttrs = {} # maps name to attribute
				self._mk_changedAttrs['className'] = _classNameAttr  # changedAttrs is a set
				# Tell ObjectStore it happened
				self._mk_store.objectChanged(self)

